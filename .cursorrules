# Search Ads Management Application - .cursorrules

## Project Overview
This is a specialized application for managing Google Ads Search campaigns, focusing on ad management (headlines and descriptions). The application handles Responsive Search Ads with up to 15 headlines and 4 descriptions per ad.

## General Preferences
- Use JavaScript (not TypeScript) for all files
- Prefer functional components over class components
- Use ES6+ features like arrow functions, destructuring, and async/await
- Always use proper error handling with try-catch blocks
- Write self-documenting code with clear variable and function names
- Keep functions small and focused on single responsibilities

## Next.js Specific
- Use Next.js 13+ App Router structure when possible
- Always use proper Next.js imports (next/link, next/image, next/router)
- Follow Next.js file naming conventions (page.js, layout.js, loading.js)
- Use Next.js built-in optimization features (Image, Link components)
- Always include proper metadata and SEO considerations
- Use getServerSideProps or getStaticProps appropriately for data fetching
- Implement proper API route structure in /pages/api/

## MongoDB Collections & Database Structure

### Primary Collections

#### 1. `search_ads` Collection
```javascript
{
  "_id": ObjectId,
  "account_id": "3729097555",
  "account_name": "Climber AB",
  "campaign_id": "209687521",
  "campaign_name": "Climber.se - Search",
  "ad_group_id": "66113329850",
  "ad_group_name": "Pris - QlikView",
  "ad_id": "352013070441",
  "ad_type": "RESPONSIVE_SEARCH_AD",
  "headlines": ["headline1", "headline2", ...], // Array of up to 15 headlines
  "descriptions": ["desc1", "desc2", ...],     // Array of up to 4 descriptions
  "headline_count": 8,
  "description_count": 4,
  "status": "ACTIVE", // ACTIVE, PAUSED, REMOVED
  "is_pending": false,
  "unique_id": "uuid-string",
  "composite_id": "209687521_66113329850_352013070441",
  "created_at": ISODate,
  "created_by": "user@example.com",
  "last_modified": ISODate,
  "last_modified_by": "user@example.com",
  "last_sync": ISODate,
  "sync_source": "google_ads"
}
```

#### 2. `search_ad_changes` Collection
```javascript
{
  "_id": ObjectId,
  "change_id": "uuid-string",
  "ad_id": "352013070441",
  "campaign_id": "209687521",
  "campaign_name": "Climber.se - Search",
  "ad_group_id": "66113329850",
  "ad_group_name": "Pris - QlikView",
  "action": "ADD_HEADLINE", // ADD_HEADLINE, EDIT_HEADLINE, REMOVE_HEADLINE, ADD_DESCRIPTION, EDIT_DESCRIPTION, REMOVE_DESCRIPTION, PAUSE_AD, RESUME_AD, REMOVE_AD
  "field_changed": "headlines[2]", // Specific field that changed
  "old_value": "Old headline text",
  "new_value": "New headline text",
  "changed_by": "user@example.com",
  "user_role": "client",
  "changed_at": ISODate,
  "needs_google_ads_update": true
}
```

#### 3. `users` Collection
```javascript
{
  "_id": ObjectId,
  "email": "user@example.com",
  "password": "hashed_password",
  "role": "client", // "client" or "admin"
  "clientId": ObjectId,
  "name": "User Name",
  "created_at": ISODate,
  "last_login": ISODate,
  "status": "active", // "active" or "inactive"
  "Account ID": "3729097555"
}
```

## Data Hierarchy & Structure

### 3-Level Hierarchy: Campaigns → Ad Groups → Ads
- **Campaign Level**: Groups of related ad groups
- **Ad Group Level**: Groups of related ads targeting similar keywords
- **Ad Level**: Individual Responsive Search Ads with headlines and descriptions

### Status Management
- **ACTIVE**: Ad is enabled and serving
- **PAUSED**: Ad is temporarily disabled
- **REMOVED**: Ad is deleted (filter out from UI by default)
- **Always filter by status !== 'REMOVED'** in default views

### Content Management
- **Headlines**: Array of up to 15 text strings (max 30 characters each)
- **Descriptions**: Array of up to 4 text strings (max 90 characters each)
- **Real-time character counting** for all text inputs
- **Array manipulation** for adding/editing/removing individual headlines/descriptions

## API Endpoints Structure

### Authentication APIs
- `POST /api/auth/login` - User login
- `POST /api/auth/logout` - User logout
- `GET /api/auth/session` - Get current session

### Search Ads Management APIs
- `GET /api/search-ads` - List ads with filtering
  - Query params: `campaign_id`, `ad_group_id`, `status`, `account_id`
- `POST /api/search-ads` - Create new ad
- `PUT /api/search-ads/[ad_id]` - Update ad (headlines/descriptions)
- `DELETE /api/search-ads/[ad_id]` - Mark ad as REMOVED
- `PATCH /api/search-ads/[ad_id]/status` - Change ad status (pause/resume)

### Campaign/Ad Group APIs
- `GET /api/search-campaigns` - List campaigns
- `GET /api/search-campaigns/[campaign_id]/ad-groups` - List ad groups

### Change Tracking APIs
- `GET /api/search-changes` - List changes with filtering
- `POST /api/search-changes` - Log a change (internal use)

## Authentication & Authorization

### NextAuth Configuration
- Use NextAuth for session management
- Implement custom login with MongoDB user collection
- Support role-based access (client/admin)
- Always verify session in API routes

### Required Authentication Pattern
```javascript
// MANDATORY for ALL protected API routes
import { getServerSession } from 'next-auth/next';
import { authOptions } from './auth/[...nextauth]';

const session = await getServerSession(req, res, authOptions);
if (!session || !session.user) {
  return res.status(401).json({ success: false, message: 'Unauthorized' });
}
```

### Role-Based Access
- **Client Role**: Can manage ads for their assigned account
- **Admin Role**: Can view all accounts and change history
- Always validate user has access to requested account/campaign

## UI/UX Guidelines

### Campaign Navigation
- **Campaign List Page**: Show search campaigns with ad group counts
- **Ad Group List Page**: Show ad groups within campaign with ad counts  
- **Ad Management Page**: Show ads within ad group with editing interface

### Ad Editing Interface
- **Headlines Section**: 
  - List current headlines with character counters
  - Inline editing with save/cancel
  - Add/remove headline buttons
  - Maximum 15 headlines validation
- **Descriptions Section**:
  - List current descriptions with character counters
  - Inline editing with save/cancel
  - Add/remove description buttons
  - Maximum 4 descriptions validation

### Status Management UI
- **Status Indicators**: Clear visual status (active/paused/removed)
- **Action Buttons**: Pause/Resume/Remove with confirmations
- **Change History**: Show recent changes for admins

## Validation Rules

### Headline Validation
- **Maximum 15 headlines** per ad
- **Maximum 30 characters** per headline
- **Minimum 1 headline** required
- **No duplicate headlines** within same ad
- **No empty headlines** allowed

### Description Validation
- **Maximum 4 descriptions** per ad
- **Maximum 90 characters** per description
- **Minimum 1 description** required
- **No duplicate descriptions** within same ad
- **No empty descriptions** allowed

### Ad Validation
- **Required fields**: campaign_id, ad_group_id, ad_type
- **Valid status values**: ACTIVE, PAUSED, REMOVED
- **Proper array structure** for headlines and descriptions

## Change Tracking Requirements

### Log All Modifications
- **Every headline/description change** must be logged
- **Status changes** (pause/resume/remove) must be logged
- **Include before/after values** for all changes
- **Record user and timestamp** for audit trail

### Change Types to Track
- `ADD_HEADLINE` - New headline added
- `EDIT_HEADLINE` - Existing headline modified
- `REMOVE_HEADLINE` - Headline removed
- `ADD_DESCRIPTION` - New description added
- `EDIT_DESCRIPTION` - Existing description modified
- `REMOVE_DESCRIPTION` - Description removed
- `PAUSE_AD` - Ad paused
- `RESUME_AD` - Ad resumed
- `REMOVE_AD` - Ad marked as removed

## DaisyUI & Styling
- Use DaisyUI components as primary UI framework
- Follow DaisyUI naming conventions for classes and themes
- Use Tailwind CSS utilities for custom styling when needed
- Prefer DaisyUI semantic color classes (primary, secondary, accent, neutral)
- Use DaisyUI responsive utilities for mobile-first design
- Use DaisyUI form components (input, select, textarea, button) consistently

## Database Query Patterns

### Always Filter Removed Items
```javascript
// Default query pattern - exclude removed ads
const query = {
  campaign_id: campaignId,
  ad_group_id: adGroupId,
  status: { $ne: 'REMOVED' }
};
```

### Group Data Properly
```javascript
// Group ads by campaign and ad group
const pipeline = [
  { $match: { status: { $ne: 'REMOVED' } } },
  { $group: { 
    _id: { campaign_id: '$campaign_id', ad_group_id: '$ad_group_id' },
    ads: { $push: '$$ROOT' },
    count: { $sum: 1 }
  }}
];
```

## Error Handling & Validation

### API Response Format
```javascript
// Success response
{ success: true, data: result, message: 'Operation completed' }

// Error response  
{ success: false, data: null, message: 'Error description' }
```

### Input Validation
- **Server-side validation** for all inputs
- **Character limits** enforced on headlines/descriptions
- **Array length limits** enforced
- **Sanitize user input** before database operations

## Performance Optimization
- **Implement pagination** for large ad lists
- **Use proper indexing** on campaign_id, ad_group_id, ad_id
- **Cache frequently accessed data** (campaign/ad group names)
- **Debounced saving** for real-time editing
- **Optimize array updates** to avoid full document rewrites

## CRITICAL SECURITY RULES

### Authentication Requirements
- **NEVER remove authentication checks** from API routes
- **NEVER comment out authentication** for testing
- **ALWAYS restore authentication** if temporarily disabled
- **NEVER skip getServerSession() calls**
- **ALWAYS check session.user exists** before processing
- **NEVER hardcode authentication bypasses**
- **ALWAYS return 401** for unauthorized requests

### Database Integration Rules
- **NEVER hardcode response data** - Always use real MongoDB queries
- **NEVER return mock/fake data** - Use actual database operations
- **NEVER skip database operations** - Every request must hit database
- **ALWAYS handle database errors** properly
- **NEVER return static arrays** - Data must come from collections
- **ALWAYS validate data exists** before returning success

### Data Security
- **Always validate user permissions** for requested operations
- **Never allow cross-account data access** without authorization
- **Always include user context** in database operations
- **Validate user belongs to account** they're accessing
- **Sanitize all user input** before database queries

## Testing Requirements
- **Test headline/description character limits** thoroughly
- **Verify status changes** persist correctly
- **Test change tracking** logs all modifications
- **Verify filtering** excludes REMOVED ads
- **Test responsive design** for editing interfaces
- **Validate form submissions** handle errors gracefully

## Code Review Checklist
Before completing any task, verify:
- ✅ Authentication check present and functional
- ✅ Database connection established and used
- ✅ Real data fetched from MongoDB collections
- ✅ Headlines/descriptions validation implemented
- ✅ Character limits enforced
- ✅ Change tracking logging modifications
- ✅ Status filtering excludes REMOVED ads
- ✅ Error handling covers failure scenarios
- ✅ User permissions validated
- ✅ No hardcoded responses or mock data